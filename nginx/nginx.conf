upstream larva_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  #server unix:/app/run/gunicorn.sock;
  server app:8000;
}

server {
  listen 80 default_server;
  server_name larva.ml;

  client_max_body_size 4G;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  location /static/ {
    alias /app/static_root/;
  }

  location /media/ {
    alias /app/media/;
  }

  location / {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://larva_app_server;
      break;
    }
  }
}

